
http://blog.csdn.net/kebi007/article/details/54882425

你觉得前端工程的价值体现在哪里：
    1、为简化用户使用提供技术支持；
    2、为多个浏览器兼容性提供支持；
    3、为提高用户的浏览速度提供支持；
    4、为跨平台或者其它基于webkit或其它渲染引擎的应用提供技术支持；
    5、为展示数据提供支持；
    
    
 谈谈性能优化问题：
    1、代码层面：避免使用css表达式、避免使用高级选择器、通配选择器
    2、缓存利用：缓存Ajax、使用cdn、使用外部的js以及css便于缓存、减少DNS查找 等
    3、请求数量：合并样式和脚本、使用css图片精灵、初始首屏之外的图片 、资源按需加载、静态资源延迟加载
    4、请求宽带：压缩文件、开启GZIP
    
    代码层面的优化：
        用innerHTML代替DOM操作，减少DOM操作次数，优化JS性能；
        用setTimeout 来避免页面失去响应；
        缓存DOM节点查找的结果；
        避免使用css表达式；
        避免全局查询；
        避免使用with（with会创建自己的作用域，会增加作用域链的长度）；
        多个变量声明合并；
        避免图片或iFrame等的空的 Src （空的src会重新加载当前的页面，影响速度和效率）；
        尽量避免在html标签里写 style 样式；
    移动端的性能优化：
        尽量使用css3动画，开启硬件加速；
        适当使用touch时间代替 click事件；
        避免使用css3渐变阴影效果；
        可以使用transform：translateZ(0) 来开启硬件加速；
        不滥用float。（float在渲染时计算量比较大，尽量减少使用）；
        不滥用web字体。web字体需要下载、解析、重绘当前页面，尽量减少使用；
        合理使用requestAnimationFrame动画代替setTimeout
        CSS中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发GPU渲染，请合理使用。过渡使用会引发手机过耗电增加
        PC端的在移动端同样适用
    你如对网站的文件和资源进行优化：
        文件合并
        文件最小化、文件压缩
        使用cdn托管
        缓存的作用       
        
 列举几种IE6 bug的解决方法：
        双边距bug ： float引起的，使用display解决；
        3像素问题：float引起的，使用display:inline -3px;
        超链接hover点击后失效，使用正确的书写顺序  link  visited hover active 
        Ie z-index问题：给父级加上position：relative 
        min-height 最小高度： 使用！important解决
        select在ie6下遮盖，使用iframe嵌套
        为什么没有办法定义 1px 左右的宽度的容器（ie6默认的行高造成的，使用over：hidden，zoom：0.08  line-height：1px）
        
  
 清除浮动的几种方式，各自的优缺点：  http://www.jb51.net/css/173023.html
    1、使用空标签清除浮动  clear：both （理论上能清除任何的标签：但是增加无意义的标签）；
    2、使用 overflow：auto （空标签）
        
 js 的 typeof 返回那些数据类型：
    Object 、number 、function 、boolean、 undefined
 
 列举3种强制类型转换和2中隐式类型转换：
    强制：parseInt、parseFloat、number
    隐式：==  ===
 
 只有NaN是自己不等于自己的；
        
 split()是切割成数组的形式，join()是将数组转换成字符串
 
 数组方法：pop()尾部删除
          push()尾部添加
          unshift()头部添加
          shift（）头部删除
        
  
 js的本地对象、内置对象、宿主对象：
        本地对象：array、obj、regexp 等可以new 实例化；
        内置对象：gload Math 等不可实例化的对象；
        宿主对象：浏览器自带的document、window等；
        
  document load 和 document ready的区别：
        document.onload是在结构和样式加载完才执行js；
        document.ready原生没有这个方法，JQuery中有$().ready(function(){});
        
  
        
        
        
        
        
        
        
        
        
        
        
        
